#!/usr/bin/env python3

import argparse
import os
import subprocess

SHELL = '/bin/bash'
SRC_DIR = 'src'
DEP_DIR = 'build/dep'
OBJ_DIR = 'build/obj'
BIN_DIR = 'build/bin'


def test_comp(cc, comp_opts):
    print("Checking for compiler         ", end='', flush=True)
    try:
        subprocess.check_call([cc, '--version'], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    except FileNotFoundError:
        print("\nCannot find C compiler:")
        print("\tCC = {0}\n".format(cc))
        exit()

    code = "int main(int argc, char **argv){{" \
           "for(int i = 0; i < 10; i++){{}}" \
           "return 0;" \
           "}}"
    p = subprocess.Popen([cc, '-x', 'c', *(comp_opts.split()), '-'],
                         stdin=subprocess.PIPE, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    p.communicate(input=code.encode())
    if p.returncode:
        print("\n\033[31mThe C compiler is not c99 compliant:\033[39m"),
        print("\tCC = {0}\n\tCOMP_OPTS = {1}\n".format(cc, comp_opts))
        print("Try again with --CC=\"{0} {1} -std=c99\"".format(cc, comp_opts)),
        exit()
    print('\033[32mOK\033[39m')


def test_import(cc, comp_opts, lib):
    print("Checking {0:20s} ".format(lib), end='', flush=True)
    code = "#include <{0}.h>\nint main(int argc, char **argv){{return 0;}}".format(lib)
    p = subprocess.Popen([cc, '-x', 'c', *(comp_opts.split()), '-'],
                         stdin=subprocess.PIPE, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    p.communicate(input=code.encode())
    if p.returncode:
        print("\n\033[31mCannot include <{0}.h> with the current options:\033[39m".format(lib))
        print("\tCC = {0}\n\tCOMP_OPTS = {1}\n".format(cc, comp_opts))
        exit()
    print('\033[32mOK\033[39m')


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Configure YANNS")
    parser.add_argument('--CC', help="Specify the C compiler")
    parser.add_argument('--with-petsc-dir', dest='PETSC_DIR',
                        help="Indicate the root directory of the PETSc installation")
    parser.add_argument('--with-yaml-dir', dest='YAML_DIR',
                        help="Indicate the root directory of the YAML installation")
    args = parser.parse_args()

    CC = args.CC if args.CC else os.environ.get('CC', 'cc')
    COMP_OPTS = ' '.join(CC.split()[1:])
    LINK_OPTS = ""
    CC = CC.split()[0]

    test_comp(CC, COMP_OPTS)

    if args.PETSC_DIR == args.YAML_DIR:
        args.YAML_DIR = None
    for soft_dir in (args.PETSC_DIR, args.YAML_DIR):
        if soft_dir:
            soft_dir = os.path.abspath(os.path.expanduser(soft_dir))
            COMP_OPTS += ' -I ' + os.path.join(soft_dir, 'include')
            LINK_OPTS += ' -L ' + os.path.join(soft_dir, 'lib')
    LINK_OPTS += ' -lpetsc -lyaml -lm'
    test_import(CC, COMP_OPTS, 'mpi')
    test_import(CC, COMP_OPTS, 'petscsys')
    test_import(CC, COMP_OPTS, 'yaml')

    with open('make.inc', 'w') as make_inc:
        make_inc.write("SHELL = {0}\n".format(SHELL))
        make_inc.write('\n')
        make_inc.write("SRC_DIR = {0}\n".format(SRC_DIR))
        make_inc.write("DEP_DIR = {0}\n".format(DEP_DIR))
        make_inc.write("OBJ_DIR = {0}\n".format(OBJ_DIR))
        make_inc.write("BIN_DIR = {0}\n".format(BIN_DIR))
        make_inc.write("CC = {0}\n".format(CC))
        make_inc.write("COMP_OPTS = {0}\n".format(COMP_OPTS))
        make_inc.write("LINK_OPTS = {0}\n".format(LINK_OPTS))

    print("Configuration done with options:")
    print("\tCC = {0}\n\tCOMP_OPTS = {1}\n\tLINK_OPTS = {2}\n".format(CC, COMP_OPTS, LINK_OPTS))
