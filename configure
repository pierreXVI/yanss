#!/usr/bin/env python3

import argparse
import os
import subprocess

MAKEFILE = """SHELL = /bin/bash

SRC_DIR = src
DEP_DIR = build/dep
OBJ_DIR = build/obj
BIN_DIR = build/bin

CC = {0}
COMP_OPTS = {1}
LINK_OPTS = {2}

.PHONY: all
all: $(BIN_DIR)/yanss

$(DEP_DIR) $(OBJ_DIR) $(BIN_DIR):
\tmkdir -p $@

# === List of source files
SRC = $(wildcard $(SRC_DIR)/*.c)


$(BIN_DIR)/yanss: $(SRC:$(SRC_DIR)/%.c=$(OBJ_DIR)/%.o) | $(BIN_DIR)
\t@# printf "Linking %-14s " yanss
\t$(CC) -o $@ $^ $(LINK_OPTS)

$(OBJ_DIR)/%.o: $(SRC_DIR)/%.c | $(DEP_DIR) $(OBJ_DIR)
\t@# printf "Compiling %-12s " $*
\t$(CC) -c $(COMP_OPTS) -Iinclude -MMD -MP -MT $@ -MF $(DEP_DIR)/$*.d $< -o $@


-include $(SRC:$(SRC_DIR)/%.c=$(DEP_DIR)/%.d)


.PHONY: test
test: $(BIN_DIR)/yanss
\t$(BIN_DIR)/yanss


.PHONY: clean clean_dep clean_all
clean_all: clean clean_dep distclean
clean:
\trm -f $(OBJ_DIR)/*.o $(BIN_DIR)/yanss
clean_dep:
\trm -f $(DEP_DIR)/*.d
distclean: clean
\trm -f makefile

make.inc:
\t@echo "Run ./configure"
\texit
"""


def check(name, cmd, pipe='', err_head='', err_msg=''):
    print("Checking {0:40s} ".format(name), end='', flush=True)
    p = subprocess.Popen(cmd, shell=True,
                         stdin=subprocess.PIPE, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    p.communicate(pipe.encode())
    if p.returncode:
        print()
        if err_head:
            print('\033[31m' + err_head + '\033[39m')
        if err_msg:
            print(err_msg)
        exit()
    print('\033[32mOK\033[39m')


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Configure YANNS")
    parser.add_argument('--CC', help="Specify the C compiler")
    parser.add_argument('--with-petsc-dir', dest='PETSC_DIR',
                        help="Indicate the root directory of the PETSc installation")
    parser.add_argument('--with-yaml-dir', dest='YAML_DIR',
                        help="Indicate the root directory of the YAML installation")
    args = parser.parse_args()

    CC = args.CC if args.CC else os.environ.get('CC', 'cc')
    COMP_OPTS = CC.split()[1:]
    LINK_OPTS = []
    CC = CC.split()[0]

    check('compiler', '{0} --version'.format(CC),
          err_head="Cannot find C compiler:", err_msg="\tCC = {0}\n".format(CC))
    check('c99 standard', '{0} -x c -o /dev/null {1} -'.format(CC, ' '.join(COMP_OPTS)),
          pipe="int main(int argc, char **argv){{for(int i = 0; i < 10; i++){{}} return 0;}}",
          err_head="The C compiler is not c99 compliant:",
          err_msg="\tCC = {0}\n\tCOMP_OPTS = {1}\n\nTry again with -std=c99".format(CC, ' '.join(COMP_OPTS)))

    if args.PETSC_DIR == args.YAML_DIR:
        args.YAML_DIR = None
    for soft_dir in (args.PETSC_DIR, args.YAML_DIR):
        if soft_dir:
            soft_dir = os.path.abspath(os.path.expanduser(soft_dir))
            COMP_OPTS.append('-I ' + os.path.join(soft_dir, 'include'))
            LINK_OPTS.append('-L ' + os.path.join(soft_dir, 'lib'))
    COMP_OPTS = ' '.join(COMP_OPTS)
    LINK_OPTS = ' '.join(LINK_OPTS)

    check('include MPI', '{0} -x c -o /dev/null {1} -'.format(CC, COMP_OPTS),
          pipe="#include <mpi.h>\nint main(int argc, char **argv){{return 0;}}",
          err_head="Cannot include <mpi.h> with the current options:",
          err_msg="\tCC = {0}\n\tCOMP_OPTS = {1}\n".format(CC, COMP_OPTS))
    check('include PETSc', '{0} -x c -o /dev/null {1} -'.format(CC, COMP_OPTS),
          pipe="#include <petscsys.h>\nint main(int argc, char **argv){{return 0;}}",
          err_head="Cannot include <petscsys.h> with the current options:",
          err_msg="\tCC = {0}\n\tCOMP_OPTS = {1}\n".format(CC, COMP_OPTS))
    check('include YAML', '{0} -x c -o /dev/null {1} -'.format(CC, COMP_OPTS),
          pipe="#include <yaml.h>\nint main(int argc, char **argv){{return 0;}}",
          err_head="Cannot include <yaml.h> with the current options:",
          err_msg="\tCC = {0}\n\tCOMP_OPTS = {1}\n".format(CC, COMP_OPTS))

    check('linking PETSc', '{0} -x c -o /dev/null {1} {2} -lpetsc -'.format(CC, COMP_OPTS, LINK_OPTS),
          pipe="#include <petscsys.h>\nint main(int argc, char **argv){{return 0;}}",
          err_head="Cannot link -lpetsc with the current options:",
          err_msg="\tCC = {0}\n\tLINK_OPTS = {1}\n".format(CC, LINK_OPTS))
    check('linking YAML', '{0} -x c -o /dev/null {1} {2} -lyaml -'.format(CC, COMP_OPTS, LINK_OPTS),
          pipe="#include <yaml.h>\nint main(int argc, char **argv){{return 0;}}",
          err_head="Cannot link -lyaml with the current options:",
          err_msg="\tCC = {0}\n\tLINK_OPTS = {1}\n".format(CC, LINK_OPTS))

    LINK_OPTS = ' '.join((LINK_OPTS, ' -lpetsc -lyaml -lm'))

    with open('makefile', 'w') as makefile:
        makefile.write(MAKEFILE.format(CC, COMP_OPTS, LINK_OPTS))

    print("Configuration done with options:")
    print("\tCC = {0}\n\tCOMP_OPTS = {1}\n\tLINK_OPTS = {2}\n".format(CC, COMP_OPTS, LINK_OPTS))
